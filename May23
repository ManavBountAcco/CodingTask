1. Two Sum II - Input array is sorted
Given a sorted array of integers, return the indices of the two numbers such that they add up to a specific target.


import java.sql.Array;
import java.util.*;
public class Two_Sum {

    public static void main(String[] Args){
        //1. Two Sum II - Input array is sorted
        //Given a sorted array of integers, return the indices of the two numbers
        // such that they add up to a specific target.

        //Approach 2 pointer -> Left and right travel for k
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter your target k : ");
        int k = sc.nextInt();

        //Array input
        System.out.println("Array length: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        System.out.println("Now add your array: ");
        for (int i = 0 ; i<n ; i++){
            arr[i] = sc.nextInt();
        }


        int first = 0;
        int last = n-1;
        while(first<last){
            if((arr[first] +arr[last]) == k){
                System.out.println("Element "+arr[first]+" and " + arr[last]+" makes sum "+k);
                break;
            }else if((arr[first] +arr[last]) <k){
                first++;
            }else{
                last--;
            }
        }
        if(last<=first){
            System.out.println("No match found");
        }

    }
}


9. Rearrange a no to find min possible no in o(n) and constant space.
 
for eg input 
1. 324 -> output 234
2. 50221 - 01225

import java.util.*;
public class Minimum_No {
    public static void main(String[] args){
        //Rearrange a no to find min possible no in o(n) and constant space.

        //Approach n(logn) ->Sort
        //for O(n) can create map but space issue

        //Basic nlogn
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter length of a array ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        System.out.println("Input");
        for(int i = 0 ; i<n;i++){
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);

    }
}


3. Next Greater Element
Given a circular array, find the next greater number for every element.  
231 -> 312

// Taking max circular array possible output only for print 
import java.util.*;
public class Greater_Element {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        //3. Next Greater Element
        //Given a circular array, find the next greater number for every element.
        //231 -> 312

        //Approach
        //find max element and play swap from there

        //input  // skipping method of string to array
       // System.out.println("Enter string");
       // String str = sc.next();
        //String to Array

        System.out.println("Enter length of a array ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        System.out.println("Input");
        for(int i = 0 ; i<n;i++){
            arr[i] = sc.nextInt();
        }

        //Logic
        int max = 0;
        for (int i = 0 ; i<n;i++){
            if(arr[i] >= arr[max]){
                max = i;
            }
        }

       //swap element before k , swap full array
        for(int i = 0 ; i<max/2;i++){
            int temp = arr[i];
            arr[i] = arr[max-1 -i];
            arr[max-1-i] = temp;
        }
//        for(int  i = 0 ; i<n; i++){  //debug
//            System.out.print(arr[i]);
//        }

        //full swap
        for(int i = 0 ; i<n/2; i++){
            int temp = arr[i];
            arr[i] = arr[n-1-i];
            arr[n-1-i] = temp;
        }

        for(int  i = 0 ; i<n; i++){
            System.out.print(arr[i]);
        }


    }
}

8. Group Anagrams
Given an array of strings, group the anagrams together.

import java.util.*;
public class Group_Anagrams {
    public static void main(String[] args){

        //8. Group Anagrams
        //Given an array of strings, group the anagrams together.

        Scanner sc = new Scanner(System.in);
        System.out.println("How many strings you want");
        int n = sc.nextInt();

        System.out.println("Enter your strings");
        String[] strs  = new String[n];


        Map<String, List<String>> map = new HashMap<>();
        for (String str : strs) {
            char[] charArray = str.toCharArray();
            Arrays.sort(charArray);
            String sortedStr = new String(charArray);
            map.putIfAbsent(sortedStr, new ArrayList<>());
            map.get(sortedStr).add(str);
        }
        //now for output -> arraylist <> Map
        //time over
    }
}



